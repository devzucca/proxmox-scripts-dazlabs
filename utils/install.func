# This function sets color variables for formatting output in the terminal
color() {
  YW=$(echo "\033[33m")
  BL=$(echo "\033[36m")
  RD=$(echo "\033[01;31m")
  BGN=$(echo "\033[4;92m")
  GN=$(echo "\033[1;92m")
  DGN=$(echo "\033[32m")
  CL=$(echo "\033[m")
  RETRY_NUM=10
  RETRY_EVERY=3
  CM="${GN}✓${CL}"
  CROSS="${RD}✗${CL}"
  BFR="\\r\\033[K"
  HOLD=" "
}

# This function enables IPv6 if it's not disabled and sets verbose mode if the global variable is set to "yes"
verb_ip6() {
  if [ "$VERBOSE" = "yes" ]; then
    STD=""
  else STD="silent"; fi
  silent() { "$@" >/dev/null 2>&1; }
  if [ "$DISABLEIPV6" == "yes" ]; then
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf
    $STD sysctl -p
  fi
}

# This function sets error handling options and defines the error_handler function to handle errors
catch_errors() {
  set -Eeuo pipefail
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# This function handles errors
error_handler() {
  if [ -n "$SPINNER_PID" ] && ps -p $SPINNER_PID > /dev/null; then kill $SPINNER_PID > /dev/null; fi
  printf "\e[?25h"
  local exit_code="$?"
  local line_number="$1"
  local command="$2"
  local error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"
  echo -e "\n$error_message"
  if [[ "$line_number" -eq 23 ]]; then
    echo -e "The silent function has suppressed the error, run the script with verbose mode enabled, which will provide more detailed output.\n"
  fi
}

# This function displays a spinner.
spinner() {
    local chars="/-\|"
    local spin_i=0
    printf "\e[?25l"
    while true; do
        printf "\r \e[36m%s\e[0m" "${chars:spin_i++%${#chars}:1}"
        sleep 0.1
    done
}

# This function displays an informational message with a yellow color.
msg_info() {
  local msg="$1"
  echo -ne " ${HOLD} ${YW}${msg}   "
  spinner &
  SPINNER_PID=$!
}


# This function displays a success message with a green color.
msg_ok() {
  if [ -n "$SPINNER_PID" ] && ps -p $SPINNER_PID > /dev/null; then kill $SPINNER_PID > /dev/null; fi
  printf "\e[?25h"
  local msg="$1"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

# This function displays a error message with a red color.
msg_error() {
  if [ -n "$SPINNER_PID" ] && ps -p $SPINNER_PID > /dev/null; then kill $SPINNER_PID > /dev/null; fi
  printf "\e[?25h"
  local msg="$1"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

# This function sets up the Container OS by generating the locale, setting the timezone, and checking the network connection
setting_up_container() {
  msg_info "Setting up Container OS"
  sed -i "/$LANG/ s/\(^# \)//" /etc/locale.gen
  locale_line=$(grep -v '^#' /etc/locale.gen | grep -E '^[a-zA-Z]' | awk '{print $1}' | head -n 1)
  echo "LANG=${locale_line}" >/etc/default/locale
  locale-gen >/dev/null
  export LANG=${locale_line}
  echo $tz >/etc/timezone
  ln -sf /usr/share/zoneinfo/$tz /etc/localtime
  for ((i = RETRY_NUM; i > 0; i--)); do
    if [ "$(hostname -I)" != "" ]; then
      break
    fi
    echo 1>&2 -en "${CROSS}${RD} No Network! "
    sleep $RETRY_EVERY
  done
  if [ "$(hostname -I)" = "" ]; then
    echo 1>&2 -e "\n${CROSS}${RD} No Network After $RETRY_NUM Tries${CL}"
    echo -e " 🖧  Check Network Settings"
    exit 1
  fi
  rm -rf /usr/lib/python3.*/EXTERNALLY-MANAGED
  systemctl disable -q --now systemd-networkd-wait-online.service
  msg_ok "Set up Container OS"
  msg_ok "Network Connected: ${BL}$(hostname -I)"
}

# This function checks the network connection by pinging a known IP address and prompts the user to continue if the internet is not connected
network_check() {
  set +e
  trap - ERR
  ipv4_connected=false
  ipv6_connected=false
  sleep 1
# Check IPv4 connectivity
  if ping -c 1 -W 1 1.1.1.1 &>/dev/null; then 
    msg_ok "IPv4 Internet Connected";
    ipv4_connected=true
  else
    msg_error "IPv4 Internet Not Connected";
  fi

# Check IPv6 connectivity
  if ping6 -c 1 -W 1 2606:4700:4700::1111 &>/dev/null; then
    msg_ok "IPv6 Internet Connected";
    ipv6_connected=true
  else
    msg_error "IPv6 Internet Not Connected";
  fi

# If both IPv4 and IPv6 checks fail, prompt the user
  if [[ $ipv4_connected == false && $ipv6_connected == false ]]; then
    read -r -p "No Internet detected,would you like to continue anyway? <y/N> " prompt
    if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
      echo -e " ⚠️  ${RD}Expect Issues Without Internet${CL}"
    else
      echo -e " 🖧  Check Network Settings"
      exit 1
    fi
  fi

  RESOLVEDIP=$(getent hosts github.com | awk '{ print $1 }')
  if [[ -z "$RESOLVEDIP" ]]; then msg_error "DNS Lookup Failure"; else msg_ok "DNS Resolved github.com to ${BL}$RESOLVEDIP${CL}"; fi
  set -e
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# This function updates the Container OS by running apt-get update and upgrade
update_os() {
  msg_info "Updating Container OS"
  if [[ "$CACHER" == "yes" ]]; then
    echo "Acquire::http::Proxy-Auto-Detect \"/usr/local/bin/apt-proxy-detect.sh\";" >/etc/apt/apt.conf.d/00aptproxy
    cat <<EOF >/usr/local/bin/apt-proxy-detect.sh
#!/bin/bash
if nc -w1 -z "${CACHER_IP}" 3142; then
  echo -n "http://${CACHER_IP}:3142"
else
  echo -n "DIRECT"
fi
EOF
  chmod +x /usr/local/bin/apt-proxy-detect.sh
  fi
  $STD apt-get update
  $STD apt-get -o Dpkg::Options::="--force-confold" -y dist-upgrade
  rm -rf /usr/lib/python3.*/EXTERNALLY-MANAGED
  msg_ok "Updated Container OS"
}

# mensaje para el ct
# This function modifies the message of the day (motd) and SSH settings

motd_ssh() {
  echo "export TERM='xterm-256color'" >>/root/.bashrc
  
  # Limpiar el archivo /etc/motd
  echo -e "" >/etc/motd

  # Escribir el contenido literal en /etc/motd usando heredoc
  cat <<'EOF' >> /etc/motd

CURRENT_USER=$(whoami)

LAST_LOGIN_INFO=$(last -n 1 -a | head -n 1)
LAST_LOGIN_USER=$(echo $LAST_LOGIN_INFO | awk '{print $1}')
LAST_LOGIN_TTY=$(echo $LAST_LOGIN_INFO | awk '{print $2}')
LAST_LOGIN_DATE=$(echo $LAST_LOGIN_INFO | awk '{print $3, $4, $5, $6, $7, $8}')
LAST_LOGIN_IP=$(echo $LAST_LOGIN_INFO | awk '{print $10}')

CURRENT_USER=$(whoami)
LAST_LOGIN_INFO=$(last -n 1 -a | head -n 1)
LAST_LOGIN_USER=$(echo $LAST_LOGIN_INFO | awk '{print $1}')
LAST_LOGIN_TTY=$(echo $LAST_LOGIN_INFO | awk '{print $2}')
LAST_LOGIN_DATE=$(echo $LAST_LOGIN_INFO | awk '{print $3, $4, $5, $6, $7, $8}')
LAST_LOGIN_IP=$(echo $LAST_LOGIN_INFO | awk '{print $10}')

NODE_NAME=$(hostname)
IP_ADDRESS=$(hostname -I | awk '{print $1}')
MACHINE=$(uname -m)
KERNEL_RELEASE=$(uname -r)
KERNEL_NAME=$(uname -s)
EOF
  
echo 'echo "  **********************************************************************"' >> /etc/motd
echo 'echo "  *      Script Proxmox provided by https://dazlabs.com/               *"' >> /etc/motd
echo 'echo "  *                                                                    *"' >> /etc/motd
echo 'echo "  *      Bienvenido a:                                                 *"' >> /etc/motd
echo 'echo "  *                                                                    *"' >> /etc/motd
echo 'echo "  *      ██████╗  █████╗ ███████╗██╗      █████╗ ██████╗ ███████╗      *"' >> /etc/motd
echo 'echo "  *      ██╔══██╗██╔══██╗╚══███╔╝██║     ██╔══██╗██╔══██╗██╔════╝      *"' >> /etc/motd
echo 'echo "  *      ██║  ██║███████║  ███╔╝ ██║     ███████║██████╔╝███████╗      *"' >> /etc/motd
echo 'echo "  *      ██║  ██║██╔══██║ ███╔╝  ██║     ██╔══██║██╔══██╗╚════██║      *"' >> /etc/motd
echo 'echo "  *      ██████╔╝██║  ██║███████╗███████╗██║  ██║██████╔╝███████║      *"' >> /etc/motd
echo 'echo "  *      ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝      *"' >> /etc/motd
echo 'echo "  *                                                                    *"' >> /etc/motd
echo 'echo "  *      Autorización y acceso solo para personal autorizado.          *"' >> /etc/motd
echo 'echo "  *      Todas tas actividades en este sistema son monitoreadas        *"' >> /etc/motd
echo 'echo "  *      y registradas. El uso no autorizado resultará en acciones     *"' >> /etc/motd
echo 'echo "  *      disciplinarias severas, incluidas medidas legales.            *"' >> /etc/motd
echo 'echo "  *      Recuerde: Mantenga su contraseña segura y no la comparta      *"' >> /etc/motd
echo 'echo "  *      con nadie. Si sospecha de cualquier actividad                 *"' >> /etc/motd
echo 'echo "  *      inusual, informe de inmediato a los directores.               *"' >> /etc/motd
echo 'echo "  *                                                                    *"' >> /etc/motd
echo 'echo "  *              Gracias por mantener dazlabs seguro!                  *"' >> /etc/motd
echo 'echo "  *                                                                    *"' >> /etc/motd
echo 'echo "  **********************************************************************"' >> /etc/motd



# Imprimir info del sistema
echo 'echo ""' >> /etc/motd
echo 'echo "  *********************************************************************"' >> /etc/motd
echo 'echo "  * "' >> /etc/motd
echo 'echo "  * Información del Sistema:"' >> /etc/motd
echo 'echo "  *  - Hostname: $NODE_NAME"' >> /etc/motd
echo 'echo "  *  - IP Address: $IP_ADDRESS"' >> /etc/motd
echo 'echo "  *  - Machine: $MACHINE"' >> /etc/motd
echo 'echo "  *  - Kernel Release: $KERNEL_RELEASE"' >> /etc/motd
echo 'echo "  *  - Kernel Name: $KERNEL_NAME"' >> /etc/motd
echo 'echo "  * "
echo 'echo "  * Información del usuario:"' >> /etc/motd
echo 'echo "  *  - Usuario: $CURRENT_USER"' >> /etc/motd
echo 'echo "  *  - Último Login:"' >> /etc/motd
echo 'echo "  *    - Usuario: $LAST_LOGIN_USER"' >> /etc/motd
echo 'echo "  *    - Fecha: $LAST_LOGIN_DATE"' >> /etc/motd
echo 'echo "  *    - TTY: $LAST_LOGIN_TTY"' >> /etc/motd
echo 'echo "  *    - IP: $LAST_LOGIN_IP"' >> /etc/motd
echo 'echo "  * "
echo 'echo "  **********************************************************************"' >> /etc/motd
echo 'echo ""' >> /etc/motd

  chmod +x /etc/update-motd.d/*
  if [[ "${SSH_ROOT}" == "yes" ]]; then
    sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" /etc/ssh/sshd_config
    systemctl restart sshd
  fi
}


# This function customizes the container by modifying the getty service and enabling auto-login for the root user
customize() {
  if [[ "$PASSWORD" == "" ]]; then
    msg_info "Customizing Container"
    GETTY_OVERRIDE="/etc/systemd/system/container-getty@1.service.d/override.conf"
    mkdir -p $(dirname $GETTY_OVERRIDE)
    cat <<EOF >$GETTY_OVERRIDE
  [Service]
  ExecStart=
  ExecStart=-/sbin/agetty --autologin root --noclear --keep-baud tty%I 115200,38400,9600 \$TERM
EOF
    systemctl daemon-reload
    systemctl restart $(basename $(dirname $GETTY_OVERRIDE) | sed 's/\.d//')
    msg_ok "Customized Container"
  fi
    echo "bash -c \"\$(wget -qLO - https://github.com/devzucca/proxmox-scripts-dazlabs/raw/main/ct/${app}.sh)\"" >/usr/bin/update
  chmod +x /usr/bin/update
}
